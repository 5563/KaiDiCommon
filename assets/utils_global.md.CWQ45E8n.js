import{_ as s,c as i,o as t,ae as e}from"./chunks/framework.BmJG9Ks4.js";const c=JSON.parse('{"title":"全局变量","description":"","frontmatter":{},"headers":[],"relativePath":"utils/global.md","filePath":"utils/global.md"}'),n={name:"utils/global.md"};function l(p,a,h,d,o,k){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h1><h2 id="全局工具" tabindex="-1">全局工具 <a class="header-anchor" href="#全局工具" aria-label="Permalink to &quot;全局工具&quot;">​</a></h2><p>全局工具提供了应用级别的状态管理和工具函数。</p><h3 id="导入方式" tabindex="-1">导入方式 <a class="header-anchor" href="#导入方式" aria-label="Permalink to &quot;导入方式&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@common/utils/global&#39;</span></span></code></pre></div><h3 id="属性和方法" tabindex="-1">属性和方法 <a class="header-anchor" href="#属性和方法" aria-label="Permalink to &quot;属性和方法&quot;">​</a></h3><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>Getter/Setter</td><td>获取或设置token</td></tr><tr><td>clearToken</td><td>Function</td><td>清除token</td></tr><tr><td>appId</td><td>Getter</td><td>获取应用ID</td></tr><tr><td>systemId</td><td>Getter</td><td>获取系统ID</td></tr></tbody></table><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取token</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global.token</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new-token-value&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取应用ID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> appId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global.appId</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取系统ID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> systemId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global.systemId</span></span></code></pre></div><h3 id="token获取逻辑" tabindex="-1">Token获取逻辑 <a class="header-anchor" href="#token获取逻辑" aria-label="Permalink to &quot;Token获取逻辑&quot;">​</a></h3><p>Token的获取逻辑按以下优先级：</p><ol><li>如果在微前端环境中，优先从<code>window.microApp?.getData().token</code>获取</li><li>否则从localStorage中获取，键名由环境变量<code>VITE_TOKENKEY</code>指定，默认为<code>&#39;token&#39;</code></li></ol><h3 id="appid获取逻辑" tabindex="-1">AppId获取逻辑 <a class="header-anchor" href="#appid获取逻辑" aria-label="Permalink to &quot;AppId获取逻辑&quot;">​</a></h3><p>AppId的获取逻辑按以下优先级：</p><ol><li>如果在微前端环境中，优先从<code>window.microApp?.getData().appId</code>获取</li><li>否则从环境变量<code>VITE_APPID</code>获取</li></ol><h3 id="systemid获取逻辑" tabindex="-1">SystemId获取逻辑 <a class="header-anchor" href="#systemid获取逻辑" aria-label="Permalink to &quot;SystemId获取逻辑&quot;">​</a></h3><p>SystemId的获取逻辑按以下优先级：</p><ol><li>如果在微前端环境中，优先从<code>window.microApp?.getData().systemId</code>获取</li><li>否则从环境变量<code>VITE_SYSTEM_ID</code>获取</li></ol>`,18)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
